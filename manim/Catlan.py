from manimlib.imports import *

class BeginAnimation(Scene):
    CONFIG = {
        "sol":"solution_16_math.png"
    }
    def construct(self):
        sol = ImageMobject(self.sol).set_height(5).set_width(5).shift(DOWN*0.5)
        sen1 = TextMobject("定义“规范01数列”${a_n}$如下：${a_n}$共有$2m$项，其中$m$项为$0$，$m$项为$1$，\\\\且对任意$k\\le m,a_1,a_2...a_k$中$0$的个数不小于$1$的个数，若$m=4$，则不同的“规范01数列”共有多少个？",color = BLUE).scale(0.8)
        self.play(Write(sen1))
        self.wait(2)
        sen2 = TextMobject("不知道会不会有小伙伴对这道题感到熟悉呢？").scale(0.8).shift(DOWN*3.5)
        sen3 = TextMobject("这是一道2016年的全国卷高考题，记得自己高中时做过").scale(0.8).shift(DOWN*3.5)
        sen4 = TextMobject("这道题并不是太难，我们只需按照题意画出这样的树状图就好").scale(0.8).shift(DOWN*3.5)
        self.play(Write(sen2))
        self.wait(2)
        self.play(Transform(sen2,sen3))
        self.wait(2)
        self.play(Transform(sen2,sen4))
        self.wait(2)
        self.play(sen1.shift, UP * 3)
        self.wait(1)
        self.play(FadeIn(sol))
        self.wait(3)

        sen5 = TextMobject("但是在这道题之中，隐藏着一个有趣的数列问题，这也是今天的主题").scale(0.8).shift(DOWN*3.5)
        self.play(Transform(sen2, sen5))
        self.wait(2)
        title = TextMobject("卡特兰数 $Catalan Number$",color = BLUE).scale(1.5)
        group = VGroup(sen1,sen2)
        self.play(FadeOut(sol))
        self.play(ReplacementTransform(group, title), run_time = 2)
        self.play(ApplyWave(title))
        self.wait(3)


class Part01(GraphScene):
    CONFIG = {
        "x_min": 0,
        "x_max": 6,
        "y_min": 0,
        "y_max": 6,
        "exclude_zero_label": False,
        "y_axis_height": 6,
        "x_axis_width": 6,
        "graph_origin": DOWN * 3 + LEFT * 3,
        "func": lambda x:x,
        "func1":lambda x:x+1
    }
    def construct(self):
        sen1 = TextMobject("“规范01数列”的描述还是显得有些抽象，让我们对问题做一些转化").scale(0.8).shift(DOWN*3.5)
        sen2 = TextMobject("如果我们把它想象成一个二维运动问题").scale(0.8).shift(DOWN*3.5)
        sen3 = TextMobject("0对应着向右运动一格，1对应着向上运动一格").scale(0.8).shift(DOWN*3.5)
        sen4 = TextMobject("那么一个长度为$2n$的数列对应着一个终点为$(n,n)$的运动过程").scale(0.8).shift(DOWN*3.5)
        sen5 = TextMobject("而且这个运动有一个约束就是只能在$y=x$下方移动").scale(0.8).shift(DOWN*3.5)
        sen6 = TextMobject("这一点对应的是1的个数不能超过0的个数，并不难理解，Right？").scale(0.8).shift(DOWN*3.5)
        sen7 = TextMobject("所以我们将这样的数列问题变成了更加具体的问题，有助于我们的理解").scale(0.8).shift(DOWN*3.5)
        sen8 = TextMobject("在合法的情况下，有多少种走到$(n,n)$的路径？",color = RED).scale(0.8).shift(DOWN*3.5)

        note1 = TextMobject("$0\\rightarrow Right$",color = BLUE).scale(0.8).shift(RIGHT * 4.5 + UP )
        note2 = TextMobject("$1\\rightarrow Up$", color = BLUE).scale(0.8).shift(RIGHT * 4.5 + DOWN)

        self.play(Write(sen1))
        self.wait(2)
        self.play(Transform(sen1,sen2))
        self.wait(1)
        self.setup_axes(animate=True)
        graph = self.get_graph(self.func, color = RED)
        graph1 = self.get_graph(self.func1,color = BLUE)
        self.wait(2)
        self.play(Transform(sen1,sen3))
        self.play(Write(note1),Write(note2))
        self.wait(2)

        final = Dot().move_to(np.array([3,3,0])).set_color(RED)
        label = TextMobject("Final", color = RED).scale(0.7).next_to(final, RIGHT)
        l1 = Line(np.array([-3,-3,0]),np.array([-1,-3,0])).set_color(BLUE)
        l2 = Line(np.array([-1,-3,0]),np.array([-1,0,0])).set_color(BLUE)
        l3 = Line(np.array([-1,0,0]),np.array([3,0,0])).set_color(BLUE)
        l4 = Line(np.array([3,0,0]),np.array([3,3,0])).set_color(BLUE)
        trace1 = VGroup(l1,l2,l3,l4)
        area = Polygon(np.array([-3,-3,0]),np.array([3,-3,0]),np.array([3,3,0]),color = BLUE, fill_color = BLUE,fill_opacity = 0.5)

        self.play(Transform(sen1,sen4))
        self.wait(2)
        self.play(ShowCreation(final),ShowCreation(label))
        self.play(ShowCreation(l1))
        self.play(ShowCreation(l2))
        self.play(ShowCreation(l3))
        self.play(ShowCreation(l4))
        self.play(FadeOut(trace1))
        self.wait(2)
        self.play(Transform(sen1,sen5))
        self.play(ShowCreation(graph))
        self.play(ShowCreationThenDestruction(area),run_time = 2)
        self.wait(2)
        self.play(Transform(sen1,sen6))
        self.wait(3)
        self.play(Transform(sen1,sen7))
        self.wait(2)
        self.play(Transform(sen1,sen8))
        self.wait(3)

        sen9 = TextMobject("我们先来思考从原点出发到$(n,n)$一共有几种路径呢？",color = RED).scale(0.8).shift(DOWN*3.5)
        sen10 = TextMobject("我们一共要走$2n$步",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen11 = TextMobject("为到达终点我们只需要确定哪些步向右走就可以了",color = BLUE).scale(0.8).shift(DOWN*3.5)

        self.play(Transform(sen1,sen9))
        self.wait(3)
        self.play(Transform(sen1,sen10))
        self.wait(3)
        self.play(Transform(sen1,sen11))
        self.wait(1)
        num1 = TextMobject("1",color = RED).scale(0.7).move_to(np.array([-2.5,-2.5,0]))
        num2 = TextMobject("2",color = RED).scale(0.7).move_to(np.array([-1.5,-2.5,0]))
        num3 = TextMobject("6",color = RED).scale(0.7).move_to(np.array([-0.5,-0.5,0]))
        num4 = TextMobject("7",color = RED).scale(0.7).move_to(np.array([0.5,-0.5,0]))
        num5 = TextMobject("8",color = RED).scale(0.7).move_to(np.array([1.5,-0.5,0]))
        num6 = TextMobject("9",color = RED).scale(0.7).move_to(np.array([2.5,-0.5,0]))
        num_group = VGroup(num1,num2,num3,num4,num5,num6)
        l1.set_color(RED)
        l3.set_color(RED)
        self.play(ShowCreation(l1),Write(num1),Write(num2))
        self.play(ShowCreation(l2))
        self.play(ShowCreation(l3),Write(num3),Write(num4),Write(num5),Write(num6))
        self.play(ShowCreation(l4))
        self.wait(1)
        sen12 = TextMobject("这是一个比较简单的组合问题，共有","$C_{2n}^n$","种",color = RED).scale(0.8).shift(DOWN*3.5)
        sen13 = TextMobject("如果你还是有些不理解，不妨从2×2方格画起，自行体会一下",color = BLUE).scale(0.8).shift(DOWN*3.5)

        note3 = TextMobject("到达终点的总路径数",color = BLUE).scale(0.7).move_to(np.array([-5,1.5,0]))
        note4 = TextMobject("$C_{2n}^n$",color = RED).scale(0.8).next_to(note3,DOWN*0.8)
        self.play(Transform(sen1,sen12))
        self.wait(2)
        self.play(Write(note3))
        self.play(Write(note4))
        self.play(Transform(sen1,sen13))
        self.wait(2)

        self.play(FadeOut(trace1),FadeOut(num_group))

        sen14 = TextMobject("接下来让我们考虑不合法的路径，也就是跃过$y=x$的情况",color = RED).scale(0.8).shift(DOWN*3.5)
        sen15 = TextMobject("我们会发现任何一种非法情况都会与$y=x+1$存在接触点",color = RED).scale(0.8).shift(DOWN*3.5)
        l5 = Line(np.array([-3,-3,0]),np.array([-1,-3,0]),color = BLUE)
        l6 = Line(np.array([-1,-3,0]),np.array([-1,0,0]),color = BLUE)
        l7 = Line(np.array([-1,0,0]),np.array([3,0,0]),color = BLUE)
        l8 = Line(np.array([3,0,0]),np.array([3,3,0]),color = BLUE)
        dot = Dot().move_to(np.array([-1,0,0])).set_color(YELLOW)
        trace2 = VGroup(l5,l6,l7,l8)
        trace3 = VGroup(l7,l8)

        l9 = Line(np.array([-1,0,0]),np.array([-1,4,0]),color = GREEN)
        l10 = Line(np.array([-1,4,0]),np.array([2,4,0]),color = GREEN)
        trace4 = VGroup(l9,l10)

        self.play(Transform(sen1,sen14))
        self.wait(3)
        self.play(Transform(sen1,sen15))
        self.play(ShowCreation(l5))
        self.play(ShowCreation(l6))
        self.play(ShowCreation(l7))
        self.play(ShowCreation(l8))
        self.play(ShowCreation(graph1))
        self.play(ShowCreation(dot))
        self.play(Flash(dot))
        self.wait(2)

        sen16 = TextMobject("然后我们将这个点之后的路径沿着$y=x+1$进行一次翻折",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen17 = TextMobject("换句话说，我们将向右与向上走进行了交换",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen18 = TextMobject("然后此时的终点就变成了$(n-1,n+1)$",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen19 = TextMobject("仔细想一下，你会发现每一条非法路径都可以这样翻折",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen20 = TextMobject("也就是我们可以一一对应地将非法路径变为终点为$(n-1,n+1)$的路径",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen21 = TextMobject("而到达$(n-1,n+1)$的路径数根据刚才的经验很容易得到:","$C_{2n}^{n+1}$",color = BLUE).scale(0.8).shift(DOWN*3.5)
        sen21[1].set_color(RED)

        final_0 = Dot().move_to(np.array([2,4,0])).set_color(YELLOW)
        label_0 = TextMobject("Final").scale(0.7).next_to(final_0,DOWN*0.8).set_color(YELLOW)
        self.play(Transform(sen1,sen16))
        self.play(ReplacementTransform(trace3,trace4))
        self.wait(2)
        self.play(Transform(sen1,sen17))
        self.wait(3)
        self.play(Transform(sen1,sen18))
        self.play(ShowCreation(final_0))
        self.play(Write(label_0))
        self.wait(2)
        self.play(Transform(sen1,sen19))
        self.wait(3)
        self.play(Transform(sen1,sen20))
        self.play(ReplacementTransform(trace4,trace3))
        self.play(ReplacementTransform(trace3,trace4))
        self.wait(2)
        self.play(Transform(sen1,sen21[0]))
        self.wait(3)
        self.play(Write(sen21[1]))
        self.play(ApplyWave(sen21[1]))

        note5 = TextMobject("非法路径数",color = BLUE).scale(0.7).next_to(note4,DOWN*0.8)
        note6 = TextMobject("$C_{2n}^{n+1}$",color = RED).scale(0.8).next_to(note5,DOWN*0.8)

        self.play(Write(note5))
        self.wait(1)
        self.play(DrawBorderThenFill(note6))
        self.wait(2)

class Part02(Scene):
    def construct(self):
        sen1 = TextMobject("让我们对结果进行进一步的整理").scale(0.8).shift(DOWN*3.5)
        note1 = TextMobject("$C(n)=C_{2n}^n-C_{2n}^{n+1}$",color = BLUE).scale(0.8).to_edge(UP).shift(LEFT * 4)
        note2 = TextMobject("$\\displaystyle=\\frac{(2n)!}{n!n!}-\\frac{(2n)!}{(n+1)!(n-1)!}$",color = BLUE).scale(0.8).next_to(note1,DOWN*0.8).align_to(note1,LEFT).shift(RIGHT)
        note3 = TextMobject("$\\displaystyle=\\frac{1}{n+1}(\\frac{(2n)!(n+1)}{n!n!}-\\frac{(2n)!}{n!(n-1)!})$",color = BLUE).scale(0.8).next_to(note2,DOWN*0.8).align_to(note2,LEFT)
        note4 = TextMobject("$\\displaystyle=\\frac{1}{n+1}(\\frac{(2n)!(n+1)}{n!n!}-\\frac{(2n)!n}{n!n!})$",color = BLUE).scale(0.8).next_to(note3,DOWN*0.8).align_to(note3,LEFT)
        note5 = TextMobject("$\\displaystyle=\\frac{1}{n+1}\\frac{(2n)!}{n!n!}$",color = BLUE).scale(0.8).next_to(note4,DOWN*0.8).align_to(note4,LEFT)
        note6 = TextMobject("$\\displaystyle=\\frac{1}{n+1}C_{2n}^n$",color = RED).scale(0.8).next_to(note5,DOWN*0.8).align_to(note5,LEFT)
        note7 = TextMobject("$\\displaystyle C(n)=\\frac{2(2n+1)}{n+1}C(n-1)$",color = RED).scale(0.8).next_to(note4,RIGHT).shift(UP*0.5+RIGHT*0.5)
        self.play(Write(sen1))
        self.wait(2)
        self.play(Write(note1))
        self.wait(2)
        self.play(Write(note2))
        self.wait(2)
        self.play(Write(note3))
        self.wait(2)
        self.play(Write(note4))
        self.wait(2)
        self.play(Write(note5))
        self.wait(1)
        self.play(DrawBorderThenFill(note6))
        self.wait(2)

        sen2 = TextMobject("Bingo!这就是这道高考题背后隐藏的数列通项公式！",color =BLUE).scale(0.8).shift(DOWN*3.5)
        sen3 = TextMobject("$Catalan\\quad Number$",color = RED).scale(0.8).shift(DOWN*3.5)
        sen4 = TextMobject("另外卡特兰数也存在一个递推关系，这就留给你自己证明啦！",color = BLUE).scale(0.8).shift(DOWN*3.5)
        self.play(Transform(sen1,sen2))
        self.wait(3)
        self.play(Transform(sen1,sen3))
        self.play(ApplyWave(sen1))
        self.wait(3)
        self.play(Transform(sen1,sen4))
        self.wait(2)
        self.play(DrawBorderThenFill(note7))
        self.wait(3)

class Part04(Scene):
    CONFIG = {
        "Ming":"Ming.jpg",
        "Grid":"grid.png"
    }
    def construct(self):
        ming = ImageMobject(self.Ming).set_height(5)
        grid = ImageMobject(self.Grid).shift(DOWN).set_height(4.5)
        tip = TextMobject("事实上，我国清朝数学家明安图是卡特兰数的最早发现者",color = BLUE).scale(0.8).to_edge(UP)
        self.play(Write(tip))
        self.play(FadeIn(ming))
        self.wait(3)
        self.play(FadeOut(tip),FadeOut(ming))
        sen1 = TextMobject("卡特兰数有诸多的应用场景",color = BLUE).scale(0.8).to_edge(UP)
        sen2 = TextMobject("比如凸多边形的分割问题，","进栈出栈序列问题",color = BLUE).scale(0.8).next_to(sen1,DOWN*0.8)
        sen3 = TextMobject("而我们这里的应用场景是单调路径问题",color = BLUE).scale(0.8).next_to(sen2,DOWN*0.8)
        self.play(Write(sen1))
        self.wait(2)
        self.play(Write(sen2))
        self.wait(2)
        self.play(Write(sen3))
        self.play(FadeIn(grid))
        self.wait(2)
        self.play(FadeOut(grid))
        sen4 = TextMobject("好啦！本期视频到此就结束啦！我们下次再见~",color = BLUE).scale(0.8).next_to(sen3,DOWN*0.8)
        self.play(Write(sen4))
        self.wait(4)

