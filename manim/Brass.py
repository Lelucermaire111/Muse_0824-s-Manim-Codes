from manimlib.imports import *
from AlphaCreatures.AlphaCreature import *

class Part01(Scene):
    def construct(self):
        sen1 = TextMobject("地图上有两个地点，一个是$A$，一个是$B$").scale(0.7).shift(DOWN*3.5)
        sen2 = TextMobject("从$A$到$B$有两条路线，每条路线均由两条道路组成").scale(0.7).shift(DOWN*3.5)
        sen3 = TextMobject("绿色的路十分宽阔，无论车流量多大车程始终为1小时").scale(0.7).shift(DOWN*3.5)
        sen4 = TextMobject("黄色的路则狭窄许多，车程与本条路车流量百分比有关").scale(0.7).shift(DOWN*3.5)
        sen5 = TextMobject("也就是从$A$到$B$的车有多少比例走过此条路，车程则是多少小时").scale(0.7).shift(DOWN*3.5)
        sen6 = TextMobject("现在由于两条路线是相同的，所以车流量会平分在两条路线").scale(0.7).shift(DOWN*3.5)
        sen7 = TextMobject("此时$x$也就是$0.5$，总车程也就是$1.5$小时").scale(0.7).shift(DOWN*3.5)
        sen8 = TextMobject("现在考虑这样一件事情，我修了这样一条红色道路希望缓解交通压力").scale(0.7).shift(DOWN*3.5)
        sen9 = TextMobject("这条路车程很短，你可以认为是瞬时到达，也就是0小时").scale(0.7).shift(DOWN*3.5)
        sen10 = TextMobject("此时情况发生了一些微妙的变化").scale(0.7).shift(DOWN*3.5)

        placeA = Circle(radius = 0.2, color = BLUE, fill_color = BLUE, fill_opacity = 1).shift(LEFT*5)
        placeB = Circle(radius = 0.2, color = BLUE, fill_color = BLUE, fill_opacity = 1).shift(RIGHT*5)
        pA = TextMobject("$A$",color = BLUE).scale(1.5).next_to(placeA,LEFT)
        pB = TextMobject("$B$",color = BLUE).scale(1.5).next_to(placeB,RIGHT)

        ap = np.array([-5,0,0])
        bp = np.array([5,0,0])
        cp1 = np.array([0,2,0])
        cp2 = np.array([0,-2,0])
        group1 = VGroup(placeA,placeB,pA,pB)
        road1 = Line(ap,cp1, color = YELLOW)
        road2 = Line(cp1,bp, color = GREEN)
        road3 = Line(ap,cp2, color = GREEN)
        road4 = Line(cp2,bp, color = YELLOW)
        road5 = Line(cp1,cp2,color = RED)

        g_line = Line(np.array([-6,3.5,0]),np.array([-3,3.5,0]),color = GREEN)
        y_line = Line(np.array([-1.5,3.5,0]),np.array([1.5,3.5,0]),color = YELLOW)
        r_line = Line(np.array([3,3.5,0]),np.array([6,3.5,0]),color = RED)
        g_word = TextMobject("$1$小时",color = GREEN).scale(0.8).next_to(g_line,DOWN)
        y_word = TextMobject("百分比$x$",color = YELLOW).scale(0.8).next_to(y_line,DOWN)
        y_word_1 = TextMobject("$0.5$小时",color = YELLOW).scale(0.8).next_to(y_line,DOWN)
        y_word_2 = TextMobject("$1$小时",color = YELLOW).scale(0.8).next_to(y_line,DOWN)
        r_word = TextMobject("$0$小时",color = RED).scale(0.8).next_to(r_line,DOWN)

        self.play(Write(sen1),run_time = 2)
        self.play(ShowCreation(group1),run_time = 1)
        self.wait(2)
        self.play(FadeOut(sen1))

        self.play(Write(sen2),run_time = 2)
        self.play(ShowCreation(road1),run_time = 1)
        self.play(ShowCreation(road2),run_time = 1)
        self.play(ShowCreation(road3),run_time = 1)
        self.play(ShowCreation(road4),run_time = 1)
        self.wait(2)
        self.play(FadeOut(sen2))
        self.play(Write(sen3,run_time = 2))
        self.play(Indicate(road2,color = GREEN),Indicate(road3,color = GREEN))
        self.play(ShowCreation(g_line),Write(g_word))
        self.wait(2)
        self.play(FadeOut(sen3))
        self.play(Write(sen4,run_time = 2))
        self.play(Indicate(road1),Indicate(road4))
        self.play(ShowCreation(y_line),Write(y_word))
        self.wait(2)
        self.play(FadeOut(sen4))
        self.play(Write(sen5),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen5))
        self.play(Write(sen6),run_time = 2)

        path1 = CurvedArrow(ap,bp,angle = -TAU/4, color = BLUE)
        path2 = CurvedArrow(ap,bp,angle = TAU/4, color = BLUE)

        self.play(ShowCreation(path1),ShowCreation(path2),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen6))
        self.play(Write(sen7),run_time = 2)
        self.play(ReplacementTransform(y_word,y_word_1),run_time = 1)
        self.wait(2)
        self.play(FadeOut(sen7),FadeOut(path1),FadeOut(path2))
        self.play(Write(sen8),run_time = 2)
        self.play(ShowCreation(road5),run_time = 1)
        self.wait(2)
        self.play(FadeOut(sen8))
        self.play(Write(sen9),run_time = 2)
        self.play(ShowCreation(r_line),Write(r_word))
        self.wait(2)
        self.play(FadeOut(sen9))
        self.play(Write(sen10),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen10))

        sen11 = TextMobject("此时可以只走黄色的道路，这样只需要花$1$小时").scale(0.7).shift(DOWN*3.5)
        sen12 = TextMobject("BUT!!!!!").shift(DOWN*3.5)
        sen0 = TextMobject("We are selfish.",color = RED).shift(DOWN*2+LEFT*4)
        path3 = CurvedArrow(ap,cp1,angle = -TAU/4,color = BLUE)
        path4 = CurvedArrow(cp2,bp,angle = TAU/4,color = BLUE)
        path6 = CurvedArrow(cp1,bp,angle = -TAU/4,color = BLUE)
        path5 = CurvedArrow(ap,cp2,angle = TAU/4,color = BLUE)
        self.play(Write(sen11),run_time = 2)
        self.play(ShowCreation(path3),ShowCreation(path4))
        self.wait(2)
        self.play(FadeOut(sen11))
        self.play(Write(sen12))
        self.wait(1)
        self.play(DrawBorderThenFill(sen0),run_time = 1)
        self.wait(2)

        sen13 = TextMobject("这就会使得所有人都会选择这一条路线").scale(0.7).shift(DOWN*3.5)
        sen14 = TextMobject("进而导致黄色道路车流量百分比是百分之百").scale(0.7).shift(DOWN*3.5)
        sen15 = TextMobject("此时无论你怎样走，总车程均是$2$小时").scale(0.7).shift(DOWN*3.5)
        sen16 = TextMobject("红色道路反而成了一种麻烦！").scale(0.7).shift(DOWN*3.5)
        sen17 = TextMobject("这就是","布雷斯悖论").scale(0.7).shift(DOWN*3.5)
        sen17[1].set_color(BLUE)
        sen18 = TextMobject("它提醒我们无论作为决策者还是参与者，都需要考虑这样一个问题:").scale(0.7).shift(DOWN*3.5)
        sen19 = TextMobject("自私的行为在什么时候是近似最优的?",color = RED).shift(DOWN*3.5)
        self.play(FadeOut(sen12))
        self.play(Write(sen13),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen13))
        self.play(Write(sen14),run_time = 2)
        self.play(ReplacementTransform(y_word_1,y_word_2))
        self.wait(2)
        self.play(FadeOut(sen14))
        self.play(Write(sen15),run_time = 2)
        group = VGroup(path5,path6)
        self.play(FadeOut(path3),FadeOut(path4))
        self.play(ShowCreationThenFadeOut(path1))
        self.play(ShowCreationThenFadeOut(path2))
        self.play(ShowCreationThenFadeOut(group))
        self.wait(2)
        self.play(FadeOut(sen15))
        self.play(Write(sen16),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen16))
        self.play(Write(sen17[0]))
        self.play(DrawBorderThenFill(sen17[1]),run_time = 1)
        self.wait(3)
        self.play(FadeOut(sen17))
        self.play(Write(sen18),run_time = 2)
        self.wait(2)
        self.play(FadeOut(sen18))
        self.play(Write(sen19),run_time = 2)
        self.wait(3)


class Trail(Scene):
    def construct(self):
        Alex = PiCreature().to_edge(DOWN).set_color(RED)
        self.add(Alex)
        sen = TextMobject("Let's go!")
        self.play(PiCreatureSays(
            Alex,sen,
            bubble_kwargs = {"height":4,"width":6},
            target_mode = "speaking"
        ))
        self.wait()
        self.play(Blink(Alex))
